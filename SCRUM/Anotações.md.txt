# PROJETOS ÁGEIS COM SCRUM## Introdução a Gestão de Projetos e ao SCRUM### Instrutor: Thiago Sano**Desafios do desenvolvimento de software:**O software vem para facilitar, atender a empresa no seu objetivo.**Requisitos:**- Processo de Desenvolvimento:- Concepção;- Análise e Design;- Desenvolvimento;- Testes;- Implantação;###### Princípio de *Pareto* também se aplica ao desenvolvimento de software, onde 20% das funcionalidades costumam gerar 80% do benefício esperado.**Gestão de Projetos**x 	| Tradicional                                                  | Ágil                                                         || ------------------------------------------------------------ | ------------------------------------------------------------ || Escopo definido na fase inicial do projeto (preditivo).      | Escopo definido ao longo do projeto (adaptativo).            || Projeto é controlado por fases e macros.                     | Projeto é controlado por funcionalidades entregues.          || Só é possível ver o *software* funcionando na fase final do projeto. | Podemos ver partes do software funcionando na parte inicial do projeto. || Enfrenta resistência à mudanças.                             | Mudanças constantes de acordo com *feedbacks contínuos.      |**Tradicional ou Waterfall** = **cascata**: só permite que o projeto avance quando uma fase está inteiramente completa (levam meses).Requeriment	Design		Implementation			Verification				Maintenance**Ágil:** *Software* construído por partes (incremental) e cada parte executa-se em um ciclo (iterativo).| Requisitos | Requisitos | Requisitos || ---------- | ---------- | ---------- || Análises   | Análises   | Análises   || Construção | Construção | Construção || Testes     | Testes     | Testes     || Liberação  | Liberação  | Liberação  |No modelo *Waterfall*, você corre o risco de descobri que estava errado depois de meses.No modelo *SCRUM* você descobre que estava errado em no máximo 30 dias.*Ágil é diferente de rápido.***O que é ser ágil?:**- Rapidez na mudança e desembaraço;- Fazer coisas complexas de forma simples(fatia, divide para entregar de forma simples);- Equipe comprometida com os objetivos (vemos cada resultado no decorrer do processo);- Maior valor para o cliente;- Ter capacidade de responder rapidamente a mudanças;**SCRUM:** é um dos *frameworks* de gerenciamento de projetos ágeis;*Projetos usando equipes pequenas e multidisciplinares produzem os melhores resultados.***Pilares do SCRUM:**1. Transparência - Conversar mais escrever menos; - Demonstrar o software constantemente aos usuários e obter feedbacks constantes2. Adaptação; - Requisitos mudam ao longo do tempo;3. Inspeção; - Aprender progressivamente com o uso do software;**Razões para adotar o SCRUM:**- Desenvolvimento é entregue em partes menores (2 a 4 semanas), com constante feedback dos usuários;- Melhor gerenciamento de riscos (Redução de incertezas);- Comprometimento, motivação e transparência da equipe. (Daily Meeting);- Maior valor para o negócio; (Priorização do Backlog)- Usuários envolvidos durante todo o ciclo;- Aplicação das lições aprendidas. (melhora contínua);**Por que as startups utilizam framework ágil?**Minimum Viable Product (MVP)*Nubank* e *Ifood*, trabalharam assim.## Papéis e Responsabilidades de Cada um do Time### Instrutor: Thiago Sano**Product Owner (PO):**- Representa a área de negócios;- Não é um comitê;- Define as funcionalidades do software (product backlog);- Prioriza as funcionalidades de acordo com o valor do negócio;- Garante que o time de dev entenda o backlog.**Scrum Master (SM):**- Garante o uso correto do SCRUM;- Scrum Master não é gerente de projetos;- Age como facilitador;- Auxilia o product owner no planejamento e estimativas do backlog;- Auxilia a equipe a remover impedimentos;- Treina o time em autogerenciamento e interdisciplinaredade;- Faz o time crescer em maturidade.**Time de desenvolvimento (DEVs 3 a 9 pessoas):**Possui habilidades suficientes para desenvolver, testar, criar e desenhar, ou seja tudo que for necessário para entregar o software funcionando;##  Cerimônias do SCRUM### Instrutor: Thiago Sano**Time box=** tempo máximo para fazer uma cerimônia ou Sprint**Sprint=** corrida, arrancada (é o principal do SCRUM).Duração de 1 sprint: 30 dias corridos ou menos.*Composição da Sprint*- Planejamento da Sprint;- Reuniões diárias (Daily Meeting);- Revisão da Sprint (Review;- Retrospectiva da Sprint.###### Planejamento da Sprint (1 dia):- Participa: PO, SM, DEVs;- Para 30 dias são 8hrs de planejamento;- O que fazer? E como fazer? (Explica para o time sobre o backlog)- Quebra atividades;- Planning Poker (os DEVs estimatimam e esforço de cada tarefa).###### Reuniões diárias (daily meeting) ou StandUp Meeting;- Participa: DEVs, PO, SM;- O que fez no dia anterior? O que está programado para o dia? Quais são os impedimentos?;- Time-box máximo 15 minutos, feitas em pé- To do | doing | Done###### Revisão da Sprint (Review);- Participa: DEVs apresentam em passo a passo para o PO o trabalho feito;- Time box maximo de 4hrs (sprint 30 dias);###### Retrospectiva da Sprint (último dia);- Participa: DEVs e também podem PO e SM- Reunião da equipe para lições aprendidas (transparência)- Time box máximo 3hrs (sprint 30 dias)## Papéis e Responsabilidades - Product Owner (PO)### Instrutor: Diego PereiraFundamentos de projetos ágeis**Papéis e responsabilidades do PO:***PO - representa o profissional que tem a visão do que será desenvolvido, as necessidades a serem atendidas, o público que vai utilizar os serviços e os objetivos a serem alcançados.(Verifica valor agregado do produto).**Importante** Toda dúvida é válida, mostra que não estava claro!**Sprint Backlog:** quais itens deve ser priorizados e o que faz sentido.- **Refining=** saber previamente o que vai ser desenvolvido e poder questionar o PO- **Release Planning=** liberação ou lançamento de software = é o lançamento de uma nova versão oficial do produto de software.  **Tipos:****De Múltiplas Squads=** são vários times fazendo coisas distintas e devem se agrupar ao final da Release (equipe técnica).**De Projeto=** PO deve ter ciência que terá que quebrar as estórias e atividades. Priorizar as entregas de maior valor primeiro.## Analisando Escopo e Definindo Prioridades### Instrutor: Diego PereiraDefinindo escopo e prioridade.**Product Backlog:** é composto por épicos e estórias. É cada produto.**Épicos=** incremento sem muito detalhamento, ajuda a te direcionar dos caminhos que deve seguir**Estória=** detalhamento dos épicos, um épico normalmente se divide em várias estórias,onde ficam descritos o que deve acontecer e suas regras do negócio.**Como escrever uma Estória:**- Nome da estória;- Descrição da estória (Eu, como, quero, quando);- Regras de Negócio (separar regras de frontend e backend);- Tela (link ou imagem das telas a serem desenvolvidas);- KPI (quais valores/ objetivos a estória precisa atingir);- Tagueamento (como a estória será "tagueada" para mensurar o KPI;- Critério de Aceite (qual passo a passo, detalhando os caminhos felizes possíveis a estória deve cumprirpara ela seja considerada aceita;###### Riscos Positivos:**Positivos:** muito ignorado nos projetos, porém um dos fatores de maiores ganhos no desenvolvimento de sistemas, pois pode priorizar outros itens no backlog.**Negativos:** itens que podem afetar o prazo, custo ou escopo de um projeto de maneira que pode acabar inviabilizando-o.## Papel do PO na transformação digital - "juntar todas as partes"### Instrutor: Diego Pereira**Transformação digital=** é um processo no qual as empresas fazem uso da tecnologia para melhorar o desempenho, aumentar o alcance e garantir resultados melhores.É uma mudança estrutural nas organizações dando um papel essencial para a tecnologia.*Papel do PO na transformação digital - "juntar todas as partes", papel estratégico para o sucesso do projeto*## Aprenda Sobre os Conceitos e Planejamento de Tarefas## Instrutor: Diego PereiraEstória (nível de negócio) x Tarefas x Épicos**Ex.:**###### Quero construir uma bicicletaî Épicos = conjuntos (rodas, garfo, banco)|Estória = o que consiste um épico ex.: garfo: guidon, amortecedores|Tarefas = montar guidon, montar garfo, etc..**Critérios de aceite:** é uma lista de critérios que precisam ser alcançados para que a *User Story (estórias)* atenda os requisitos do usuário e seja aceita pelo **PO**.Objetivo de definir limites para as *user stories*.Ajudar o **PO** a detalhar em alto nível o que é necessário para entregar valor ao cliente.**Estimativa e Planejamento ou *Planning Poker*:** é um jogo de cartas onde cada membro do time dev recebe um deck contendo todos os números da sequência de fibonatti.###### Relacionamneto com clientes e Stakeholders**Stakeholder** = **interessados diretamente ou indiretamente no projeto:** é uma pessoa ou um grupo que legitima as ações de uma organização e que tem um papel direto ou indireto na gestão e resultados dessa mesma organização. Desta forma, um stakeholder pode ser afetado positivamente ou negativamente, dependendo das suas políticas e forma de atuação.**Ex.:**- Podem ser funcionários;- Gestores;- Gerentes;- Proprietários;- Etc;## Rotinas de um Time Ágil### Instrutor: Diego PereiraRitos**Daily (15 min)=** são reuniões diárias que duram em média 15 minutos. Obrigatória a presença dos DEVs.Objetivo da Daily: O que fiz ontem? / O que estou fazendo? / O que eu vou fazer? / Preciso de ajuda?**Retrospectiva (focada na sprint como um todo)=** acontece 1 vez na *sprint* após sua conclusão.Objetivo da Retrospectiva: o que se deve melhorar e o que não se deve fazer na próxima sprint.**Retro:** obrigatório a presença de DEVs (desenvolvedores) e SM (Scrum Master).**Refinamento** = **uma cerimônia não oficial da SCRUM**= tem a finalidade de aumentar o entendimento da demanda e aumentar o retorno esperado pro projeto. É a hora de perguntar e tirar dúvidas. Facilitar a *planning*.Requer: a presença de todos do time SCRUM (PO, DEVs e SM).**Review (DEVs)=** oportunidade de mostrar o trabalho feito na *sprint* anterior. Ideia principal, checar se tudo está de acordo e se agrega valor ao negócio.**Maturidade da equipe:** Toma atitude, time que anda sozinho.- SCRUM  - Transparência  - Inspeção  - Adaptação